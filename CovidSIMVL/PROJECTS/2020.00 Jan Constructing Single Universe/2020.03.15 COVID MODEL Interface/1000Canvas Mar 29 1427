<!DOCTYPE html>
<html>
<style>
  th,  td {
    border: 1px solid red;
    padding: 3px;
    text-align: center;
}
  th {
      cursor: pointer;
  }
</style>

<body>
  <div class="topnav">
    <table>
      <tr>
        <th onclick="showPop()"> Click Me</th>
        <th onclick="showDist()">f(distance)</th>
        <th onclick="showVect()">Vectors</th>
      </tr>
      <tr>
        <td id="dGen">0</td>
        <td id="dDist">1</td>
        <td id="dVect">N</td>
      </tr>
    </table>

  </form>


  <canvas id="myCanvas" width="2000" height="1000"
          style="border:1px solid #d3d3d3;">
  </canvas>





<script>
var XSIZE = 1000;
var YSIZE = 800;
var TRAVEL = [1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5,5,6,6,6,6,6,10,10,10,30,30,50];
var DIRECTION = [-1,0,1];
var rand, randint;
var newX, ndwY, delX, delY;
var contagion = true;


var PERSON = [];
var pX = [];
var pY = [];
var pSize = [];       //radius = initial size; changes with infectivity & susceptibility

var pColor = [];      //green = susc; yellow=incub; blue=transmitter; red=cliniical; purple=recovered
var pStatus = [];     //same as color but color may be used for vector display
var pfInfect = [];    // 0 = constant; 1=increase with days by 25%; 2=superspreader at 5x radius
var pIncDay = [];     //max incubation days
var pTransDay = [];   //days of transmit count
var pInfDay = [];     //no. of transmitting days
var pfSusc = [];      //starts at 1

var nPerson = 10;
var radius = 10;
var xSep = XSIZE/nPerson;
var ySep = YSIZE/nPerson;
var avgSus = 1;
var avgIncDays = 7;
var avgInfDays = 5;
var avgClinDays = 1;



// populate

var canvas = document.getElementById("myCanvas");
var ctx = canvas.getContext("2d");

var i,j,k;

for (y=1; y<11; y++){
  for (x=1; x<11; x++){
    i = (y-1)*nPerson+x;
    PERSON[i] = i;
    pX[i] = x*xSep;
    pY[i] = y*ySep;
    pColor[i] = "green";
    pfSusc[i] = 1;
    pSize[i] = radius;
    pfInfect[i] = 0;
    pStatus[i] = "green";

//    alert(pTH + "," + pX[pTH] +"," + pY[pTH]);

  }
}

function finddelXY(){
  rand = (Math.random());
  rand = rand*34;
  randint = Math.floor(rand);
  delX = radius + fDist*TRAVEL[randint];

  rand = (Math.random());
  rand = rand*34;
  randint = Math.floor(rand);
  delY = radius + fDist*TRAVEL[randint];

  rand = (Math.random());

  randint = rand*3;

  randint = Math.floor(randint);

  if (DIRECTION[randint]==-1){
      delX = -delX;
    } else {
      if (DIRECTION[randint]==0){
        delX=0;
      }
    }
  rand = (Math.random());
  randint = rand*3;
//  alert(rand);
  randint = Math.floor(randint);
//  alert(randint);
//  alert(DIRECTION[randint]);
  if (DIRECTION[randint]==-1){
      delY = -delY;
    } else {
        if (DIRECTION[randint]==0){
            delY=0;
        }
    };


}

function drawc(x,y,rad,color){
  ctx.beginPath();
  ctx.arc(x,y,rad,0,2*Math.PI);
  ctx.fillStyle = color;
  ctx.fill();
  ctx.stroke();
}

// draw population initial


for (i=1; i<101; i++){
  drawc(pX[i],pY[i],radius,pColor[i]);
};

function collision(i){
  for (j=1;i<101;i++){
    if (intersect(i,j)){
      if (Status[])
    }
  }
}

//population move
function popUpdate(){
for (i=1; i<101; i++){
  finddelXY();

  newX = pX[i] + delX;
  newY = pY[i] + delY;

  if (newX > XSIZE){
      newX = 2*XSIZE - newX;
  };
  if (newX < 0){
      newX = -newX;
  }

  if (newY > YSIZE){
      newY = 2*YSIZE - newY;
  };
  if (newY < 0){
      newY = -newY;
  };

  if (dVect) {

    pColor[i] = "green";

    if ((Math.abs(newX-pX[i])==0) && (Math.abs(newY-pY[i])==0)){
      pColor[i] = "white";
    };

    if (Math.abs(newX-pX[i])>20){
      pColor[i] = "red";
      };
    if (Math.abs(newY-pY[i])>20){
        pColor[i] = "red";
      };

    if (Math.abs(newX-pX[i])>30){
        pColor[i] = "blue";
      };
    if (Math.abs(newY-pY[i])>30){
        pColor[i] = "blue";
    };

    if (Math.abs(newX-pX[i])>50){
      pColor[i] = "yellow";
    };
    if (Math.abs(newY-pY[i])>50){
      pColor[i] = "yellow";
    };
    pColor[36] = "orange";
    pColor[46] = "black";
    pColor[65] = "orange";

    ctx.moveTo(pX[i],pY[i]);
    ctx.lineTo(newX, newY);
    ctx.lineWidth = 2;
    ctx.strokeStyle = 'blue';
    ctx.stroke();
}
  pX[i] = newX;
  pY[i] = newY;
  if (dVect==false){
    pColor[i] = "green";
  }

  if (contagion) {
    pColor[i] = pStatus[i];
    //start of cycle - now turn all yellows to blue
    turnYellow(i);
    //start of cycle - and turn all blues to red
    turnBlue(i);
    //start of cycle - turn Reds to purple out of circulation
    turnRed(i);
    //now test for collisions and infections
    collision(i);
  }
 }
}

function testYellow(i){
  if (pIncDay[i]>0){
    pIncDay[i] = pIncDay[i] - 1;
    if (pIncDay[i]==0){
      pStatus[i]="blue";
      pInfDay[i] = avgInfDays;

    }
  }
}

function goPop(){
  ctx.clearRect(0,0,canvas.width,canvas.height);
  ctx.beginPath();
  ctx.stroke();

  popUpdate();
  for (i=1; i<101; i++){
    drawc(pX[i],pY[i],radius,pColor[i]);
  }
}

dVect = false;
function showVect(){
  var vecTxt = prompt("W-G-R-B-Y for distances + line vectors: Y or N", "Y");
  if (vecTxt == "Y"){
      dVect = true;
  } else {
    dVect = false;
    vecTxt = "N";
  }
  document.getElementById("dVect").innerHTML = vecTxt;
}

var fDist = 1.0;
function showDist(){
    var txt;
    var distTxt = prompt("Enter travel distance factor:", "1");
    if (distTxt == null || distTxt == "") {
      txt = "-0";
    } else {
      txt = distTxt;
    }
    document.getElementById("dDist").innerHTML = txt;
    fDist = parseFloat(txt);

    goPop();
  }

var gen;
gen = 0;

function showPop(){
    gen = gen + 1;
    goPop();
    document.getElementById("dGen").innerHTML = gen;
}


</script>

</body>
</html>
